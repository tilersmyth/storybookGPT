name: Deploy to Amazon ECS

on:
  push:
    branches:
      - ci-deploy-test

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: testing-ecr-repo
  ECS_SERVICE: testing-ecsService
  ECS_CLUSTER: testing-ecsCluster
  ECS_TASK_DEFINITION: testing-ecsTaskDef
  CONTAINER_NAME: testing-app

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: "arn:aws:iam::233486974813:role/git-action-cross-account-role"
          role-duration-seconds: 1200 # 20 minutes
          role-session-name: StorybookBuild
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          builder: ${{ steps.docker-buildx.outputs.name }}
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
          cache-from: |
            type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:latest
          cache-to: type=inline
          tags: |
            $ECR_REGISTRY/$ECR_REPOSITORY:latest
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
